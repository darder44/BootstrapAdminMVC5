using Bootstrap.DataAccess.Helper;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Linq;

namespace Microsoft.AspNetCore.Builder
{
    /// <summary>
    /// 自動生成資料庫扩展操作類
    /// </summary>
    public static class AutoGenerateDatabaseExtensions
    {
        private static bool _init;
        private static object _locker = new object();
        private const string SqlFolderKey = "SqlFolder";
        /// <summary>
        /// 自動生成資料庫中間件
        /// </summary>
        /// <param name="app"></param>
        public static IApplicationBuilder UseAutoGenerateDatabase(this IApplicationBuilder app)
        {
            app.Use(async (context, next) =>
            {
                if (!_init)
                {
                    // 優化性能
                    var config = context.RequestServices.GetRequiredService<IConfiguration>();
                    var autoGenerate = config.GetValue("AutoGenerateDatabase", false);
                    if (!autoGenerate) _init = true;
                    if (autoGenerate)
                    {
                        // 阻止所有线程继续往下运行，等待資料庫檢查
                        lock (_locker)
                        {
                            if (!_init)
                            {
                                // 資料檢查
                                var dbSection = config.GetSection("DB").GetChildren().FirstOrDefault(c => c.GetValue("Enabled", false));
                                if (dbSection != null)
                                {
                                    var folder = dbSection.GetValue(SqlFolderKey, "").ReplaceOSPlatformPath();
                                    if (!string.IsNullOrEmpty(folder))
                                    {
                                        // 判斷文件夹是否存在
                                        var env = context.RequestServices.GetRequiredService<IWebHostEnvironment>();
                                        var fullFolder = Path.Combine(env.ContentRootPath, folder);
                                        if (Directory.Exists(fullFolder))
                                        {
                                            try
                                            {
                                                AutoDbHelper.EnsureCreated(fullFolder);
                                            }
                                            catch { }
                                        }
                                    }
                                }
                            }
                            _init = true;
                        }
                    }
                }
                await next();
            });
            return app;
        }
    }
}
